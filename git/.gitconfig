[user]
  name = 284km
  email = at284km@gmail.com
[color]
  # ui = auto
  # colorの設定(以下のコマンドは自動で色つける)
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
[push]
  default = simple
[core]
  # globalな.gitignoreの指定
  excludesfile = ~/.gitignore
  # true: コミット時に CRLF -> LF, チェックアウト時に LF -> CRLF
  # input: コミット時にのみ CRLF -> LF に変換, Windows の場合のみ true と同じ
  # false: 変換しない
  autocrlf = input
  editor = vim
  # UTF-8 code で日本語ファイル名が表示される対策
  quotepath = false
[merge]
  tool = vimdiff
  # --no-ff にする (default: --ff)
  ff = false
[branch]
  # git pull –rebase にする
  # git pull は git fetch して git merge と同じ
  # --no-ff しているのでマージコミットまみれ防ぐため
  autosetuprebase = always
[pull]
  # 全ブランチで rebase を使う(1.7.9以降)
  rebase = true
[pager]
  log = diff-highlight | less
  show = diff-highlight | less
  diff = diff-highlight | less -r
[ghn]
  token = a043937db3f97410e77efa19495c32aaee7c7469
[alias]
  # git の current branch をコマンドで取得する
  current-branch = rev-parse --abbrev-ref HEAD
  # pull-req のコミットをまるっと fetch
  fetch-pulls = fetch origin +refs/pull/*:refs/remotes/pull/*
  fpr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"
  # git pull してからコンフリクトすると嫌なので、git pull する前に変更をあらかじめ調べる
  pull-dry-run  = !"git fetch origin; B=$(git rev-parse --abbrev-ref HEAD); git diff --stat --summary ${B}..origin/${B}"

  s   = status
  sb  = status -bs
  ss  = status -s
  sh  = show
  sh1 = show HEAD^
  sh2 = show HEAD^^
  sh3 = show HEAD^^^
  sh4 = show HEAD^^^^
  sh5 = show HEAD^^^^^
  sh6 = show HEAD^^^^^^
  sh7 = show HEAD^^^^^^^
  sh8 = show HEAD^^^^^^^^
  sh9 = show HEAD^^^^^^^^^

  so  = remote show origin
#   # pull/push/fetch
#   ft  = fetch
#   ftp = fetch --prune
#   up  = pull --rebase       # pull rebase
  po  = push origin         # push origin
#   pof = push -f origin      # force
  pu  = push -u origin      # push origin and set upstream
#   # push current branch to origin with --upstream
#   puc = "!f() { git push origin -u `git symbolic-ref --short HEAD` ;}; f"
  # rebase
  rbm = rebase --merge master       # masterへのrebaseはよく使うのでalias
#   rbd = rebase --merge develop
  rbc = rebase --continue
  rba = rebase --abort
  rbi = rebase -i
  rbi1 = rebase -i HEAD^
  rbi2 = rebase -i HEAD^^
  rbi3 = rebase -i HEAD^^^
  rbi4 = rebase -i HEAD^^^^
  rbi5 = rebase -i HEAD^^^^^
  rbi6 = rebase -i HEAD^^^^^^
  rbi7 = rebase -i HEAD^^^^^^^
  rbi8 = rebase -i HEAD^^^^^^^^
  rbi9 = rebase -i HEAD^^^^^^^^^
  wip = !"git add --all; git commit -m \"`date +%Y%m%d_%H%M%S` [ci skip]\""

#   # merge
#   mn  = merge --no-ff
#   rebase-and-merge = "!f() { git checkout $2 && git rebase --merge --no-ff $1 && git checkout $1 && git merge --no-ff $2 && echo '' && echo \"branch $2 is rebased onto $1 and merged into $1\"; }; f"
#   ram = "!f() { git rebase-and-merge $1 $2 ;}; f"
  # comit
#   ad  = add
  ap  = add -p
  au  = add -u
  c   = commit
  ca  = commit -a           # modifiedなファイルを全てstageへ
  cv  = commit -v           # diff を見ながら
#   cam = commit -a --amend   # 直前のcommitを修正
  cc  = shortlog -sn --no-merges --since='$(date +%Y/%m/%d) 00:00:00' # today's commit count
  cc1 = shortlog -sn --no-merges --since='$(date --date "1 day ago" +%Y/%m/%d) 00:00:00' --before='$(date +%Y/%m/%d) 00:00:00' # yesterday's commit count
  cc2 = shortlog -sn --no-merges --since='$(date --date "2 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "1 day ago" +%Y/%m/%d) 00:00:00'
  cc3 = shortlog -sn --no-merges --since='$(date --date "3 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "2 day ago" +%Y/%m/%d) 00:00:00'
  cc4 = shortlog -sn --no-merges --since='$(date --date "4 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "3 day ago" +%Y/%m/%d) 00:00:00'
  cc5 = shortlog -sn --no-merges --since='$(date --date "5 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "4 day ago" +%Y/%m/%d) 00:00:00'
  cc6 = shortlog -sn --no-merges --since='$(date --date "6 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "5 day ago" +%Y/%m/%d) 00:00:00'
  cc7 = shortlog -sn --no-merges --since='$(date --date "7 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "6 day ago" +%Y/%m/%d) 00:00:00'
  cc8 = shortlog -sn --no-merges --since='$(date --date "8 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "7 day ago" +%Y/%m/%d) 00:00:00'
  cc9 = shortlog -sn --no-merges --since='$(date --date "9 day ago" +%Y/%m/%d) 00:00:00' --before='$(date --date "8 day ago" +%Y/%m/%d) 00:00:00'
  co  = checkout
  cb  = checkout -b         # branch切ってcheckoutする
#   ct  = checkout --track    # remoteのbranchを追跡
  cm  = checkout master
  cd  = checkout develop
  # branch関連
  br  = branch
  brt = "!f() { for i in `git branch | colrm 1 2` ; do echo `git log --date=iso8601 -n 1 --pretty='format:[%ai] %h' $i` $i ; done; }; f | sort -r"
  ba  = branch -a           # originも含めた全てのbranchを表示
  bat = "!f() { for i in `git branch -a | grep -v '>' | colrm 1 2` ; do echo `git log --date=iso8601 -n 1 --pretty='format:[%ai] %h' $i` $i ; done; }; f | sort -r"
  bm  = branch --merged     # merge済みのbranchを表示
  bn  = branch --no-merged  # mergeしてないbranchを表示
  bo  = branch -r           # remote branchを表示
  # log関連
#   edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
#   wc  = whatchanged         # logに変更されたファイルも一緒に出す
  lg  = log --graph         # display graphical representation of commit history
  ls  = log --stat          # logに変更されたファイルも一緒に出す
  lp  = log -p              # diffも一緒に出す
#   la  = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
#   lr  = log origin          # originのlog
#   ll = log --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
#   ll1 = log --date=short --max-count=1 --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
#   lll = log --date=short --max-count=10 --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
#   oneline = log --pretty=oneline
  lo  = log --decorate --pretty=oneline
#   ranking = shortlog -s -n --no-merges
#   # logをtree表示
#   log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
#   log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # reset
  r    = reset HEAD
  r1   = reset HEAD~
  r2   = reset HEAD~~
  r3   = reset HEAD~~~
  r4   = reset HEAD~~~~
  r5   = reset HEAD~~~~~
  rsh  = reset --soft HEAD
  rsh1 = reset --soft HEAD~
  rsh2 = reset --soft HEAD~~
  rsh3 = reset --soft HEAD~~~
  rsh4 = reset --soft HEAD~~~~
  rsh5 = reset --soft HEAD~~~~~
  rsh6 = reset --soft HEAD~~~~~~
  rsh7 = reset --soft HEAD~~~~~~~
  rsh8 = reset --soft HEAD~~~~~~~~
  rsh9 = reset --soft HEAD~~~~~~~~~
  rhh  = reset --hard HEAD       # 取り返しのつかないことをしてしまった……!
  rhh1 = reset --hard HEAD~
  rhh2 = reset --hard HEAD~~
  rhh3 = reset --hard HEAD~~~
  rhh4 = reset --hard HEAD~~~~
  rhh5 = reset --hard HEAD~~~~~
  rhh6 = reset --hard HEAD~~~~~~
  rhh7 = reset --hard HEAD~~~~~~~
  rhh8 = reset --hard HEAD~~~~~~~~
  rhh9 = reset --hard HEAD~~~~~~~~~

#   # git reset --hard HEAD を安全にした - 永遠に未完成 http://d.hatena.ne.jp/thinca/20120924/1348491052
#   cancel = !git commit -a -m 'Temporary commit for cancel' && git reset --hard HEAD~
#   # diff関連
#   di = diff
  d = diff
  dm = diff master           # masterとのdiff
#   dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
#   ds = diff --staged         # 同上(1.6.1以降)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
#   d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
#   # edit関連
#   # modified or untrackedなファイルを編集する
#   edit = "!f() { git status -s | cut -b 4- | grep -v '\\/$' | uniq ; }; vim `f`"
#   # mergeの際にconflictが起きたファイルを編集
#   edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
#   # mergeの際にconflictが起きたファイルをadd
#   add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
#   delete-unmerged =  "!f() { git ls-files --deleted | cut -f2 | sort -u ; }; git rm `f`"
#   # 指定したコミットで変更されたファイルを編集する
#   modified = "!f() { git diff $1..$1\\^ --name-only | xargs sh -c 'vim "$@" < /dev/tty' - ;}; f"
#   # cherr -vで出てくる;commitから#1234なチケット番号を切り出す
#   cherry-ticket-numbers = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART, RLENGTH)}' | sort -u ;}; f"
#   # cherr -vに含まれるチケットを列挙する
#   cherry-tickets = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART+1, RLENGTH-1)}' | sort -u | xargs git issue --oneline  ;}; f"
#   # colorized cheery -v
#   cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
# 
  # grep関連
  gr = grep
  gn = grep -n
#   sm = submodule
#   smupdate = submodule foreach "git checkout master; git pull origin master"
#   # stash関連(stashもう使わないのでコメントあうと)
#   # sl = stash list
#   # sp = stash pop
#   # ss = stash save
# 
#   chpk = cherry-pick # チンピク
#   iss = issue # my extended command
# 
#   # git-風呂関連
#   ff  = flow feature
#   ffl = flow feature list
#   ffs = flow feature start
#   fff = flow feature finish
#   ffc = flow feature checkout
#   ffp = flow feature publish
#   fr = flow release
#   fh  = flow hotfix
#   fhl = flow hotfix list
#   fhs = flow hotfix start
#   fhf = flow hotfix finish
#   fhp = flow hotfix publish
#   fs  = flow support
# 
#   fizzbuzz = "!f() { seq "$@" | awk '$0=NR%15?NR%5?NR%3?$0:\"Fizz\":\"Buzz\":\"FizzBuzz\"' ;}; f"
# 
# [http]
#   sslVerify = false
# 
# [tig "bind"]
#   generic = g move-first-line
#   generic = G move-last-line
#   generic = ^F move-page-down
#   generic = ^B move-page-up

[ghq]
	root = ~/src

[github]
	user = 284km
[commit]
	template = ~/dotfiles/git/.git_commit_msg.txt
